# DesiFans Platform - Development Environment
# Docker Compose file for local development with all required services

version: '3.8'

services:
  # =======================
  # DATABASE SERVICES
  # =======================
  
  # MongoDB - Primary database for User Service
  # MongoDB - Primary database for User Service
  mongodb:
    image: mongo:7.0
    container_name: desifans-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - desifans-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Express - Web UI for MongoDB
  mongo-express:
    image: mongo-express:1.0.0
    container_name: desifans-mongo-express
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - desifans-network

  # Redis - Caching and Session Management
  redis:
    image: redis:7.2-alpine
    container_name: desifans-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - desifans-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Commander - Web UI for Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: desifans-redis-commander
    restart: unless-stopped
    ports:
      - "8083:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis123
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - desifans-network

  # PostgreSQL - Alternative database for financial services
  postgresql:
    image: postgres:16-alpine
    container_name: desifans-postgresql
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: desifans_payments
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./docker/postgres/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - desifans-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin - Web UI for PostgreSQL
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: desifans-pgadmin
    restart: unless-stopped
    ports:
      - "8084:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@desifans.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - desifans-network

  # =======================
  # MESSAGE BROKER
  # =======================
  
  # Apache Kafka - Event streaming platform
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: desifans-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - desifans-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: desifans-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - desifans-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI - Web interface for Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: desifans-kafka-ui
    restart: unless-stopped
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - desifans-network

  # =======================
  # SPRING CLOUD SERVICES
  # =======================
  
  # Eureka Discovery Server
  eureka-server:
    build:
      context: ./desifans-eureka-server
      dockerfile: Dockerfile
    container_name: desifans-eureka-server
    restart: unless-stopped
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - desifans-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Config Server (when implemented)
  # config-server:
  #   build:
  #     context: ./desifans-config-server
  #     dockerfile: Dockerfile
  #   container_name: desifans-config-server
  #   restart: unless-stopped
  #   ports:
  #     - "8888:8888"
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka
  #   depends_on:
  #     eureka-server:
  #       condition: service_healthy
  #   networks:
  #     - desifans-network

  # =======================
  # EMAIL SERVICE
  # =======================
  
  # MailHog - Email testing service
  mailhog:
    image: mailhog/mailhog:latest
    container_name: desifans-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP port
      - "8086:8025"  # Web UI port
    networks:
      - desifans-network

  # =======================
  # MONITORING & OBSERVABILITY
  # =======================
  
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: desifans-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - desifans-network

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: desifans-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - desifans-network

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: desifans-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - desifans-network

  # =======================
  # FILE STORAGE
  # =======================
  
  # MinIO - S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: desifans-minio
    restart: unless-stopped
    ports:
      - "9010:9000"   # API port (changed from 9000 to 9010)
      - "9011:9001"   # Console port (changed from 9001 to 9011)
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - desifans-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # =======================
  # LOAD BALANCER
  # =======================
  
  # Nginx - Load balancer and reverse proxy
  nginx:
    image: nginx:alpine
    container_name: desifans-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/ssl/certs
    depends_on:
      - eureka-server
    networks:
      - desifans-network

  # =======================
  # DEVELOPMENT TOOLS
  # =======================
  
  # Portainer - Docker management UI
  portainer:
    image: portainer/portainer-ce:latest
    container_name: desifans-portainer
    restart: unless-stopped
    ports:
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - desifans-network

# =======================
# NETWORKS
# =======================
networks:
  desifans-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =======================
# VOLUMES
# =======================
volumes:
  # Database volumes
  mongodb_data:
    driver: local
  postgresql_data:
    driver: local
  redis_data:
    driver: local
  
  # Message broker volumes
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  
  # Monitoring volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  
  # Storage volumes
  minio_data:
    driver: local
  
  # Admin UI volumes
  pgadmin_data:
    driver: local
  portainer_data:
    driver: local
